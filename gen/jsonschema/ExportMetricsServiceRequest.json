{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/ExportMetricsServiceRequest",
    "definitions": {
        "ExportMetricsServiceRequest": {
            "properties": {
                "resourceMetrics": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.ResourceMetrics"
                    },
                    "type": "array",
                    "description": "An array of ResourceMetrics. For data coming from a single resource this array will typically contain one element. Intermediary nodes (such as OpenTelemetry Collector) that receive data from multiple origins typically batch the data before forwarding further and in that case this array will contain multiple elements."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Export Metrics Service Request"
        },
        "opentelemetry.proto.common.v1.AnyValue": {
            "properties": {
                "stringValue": {
                    "type": "string"
                },
                "boolValue": {
                    "type": "boolean"
                },
                "intValue": {
                    "type": "string"
                },
                "doubleValue": {
                    "type": "number"
                },
                "arrayValue": {
                    "$ref": "#/definitions/opentelemetry.proto.common.v1.ArrayValue",
                    "additionalProperties": true
                },
                "kvlistValue": {
                    "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValueList",
                    "additionalProperties": true
                },
                "bytesValue": {
                    "type": "string",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Any Value",
            "description": "AnyValue is used to represent any type of attribute value. AnyValue may contain a primitive value such as a string or integer or it may contain an arbitrary nested object containing arrays, key-value lists and primitives."
        },
        "opentelemetry.proto.common.v1.ArrayValue": {
            "properties": {
                "values": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.AnyValue"
                    },
                    "type": "array",
                    "description": "Array of values. The array may be empty (contain 0 elements)."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Array Value",
            "description": "ArrayValue is a list of AnyValue messages. We need ArrayValue as a message since oneof in AnyValue does not allow repeated fields."
        },
        "opentelemetry.proto.common.v1.InstrumentationScope": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "An empty instrumentation scope name means the name is unknown."
                },
                "version": {
                    "type": "string"
                },
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "Additional attributes that describe the scope. [Optional]. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
                },
                "droppedAttributesCount": {
                    "type": "integer"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Instrumentation Scope",
            "description": "InstrumentationScope is a message representing the instrumentation scope information such as the fully qualified name and version."
        },
        "opentelemetry.proto.common.v1.KeyValue": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/opentelemetry.proto.common.v1.AnyValue",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Key Value",
            "description": "KeyValue is a key-value pair that is used to store Span attributes, Link attributes, etc."
        },
        "opentelemetry.proto.common.v1.KeyValueList": {
            "properties": {
                "values": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "A collection of key/value pairs of key-value pairs. The list may be empty (may contain 0 elements). The keys MUST be unique (it is not allowed to have more than one value with the same key)."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Key Value List",
            "description": "KeyValueList is a list of KeyValue messages. We need KeyValueList as a message since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches are semantically equivalent."
        },
        "opentelemetry.proto.metrics.v1.Exemplar": {
            "properties": {
                "filteredAttributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "The set of key/value pairs that were filtered out by the aggregator, but recorded alongside the original measurement. Only key/value pairs that were filtered out by the aggregator should be included"
                },
                "timeUnixNano": {
                    "type": "string",
                    "description": "time_unix_nano is the exact time when this exemplar was recorded Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
                },
                "asDouble": {
                    "type": "number"
                },
                "asInt": {
                    "type": "string"
                },
                "spanId": {
                    "type": "string",
                    "description": "(Optional) Span ID of the exemplar trace. span_id may be missing if the measurement is not recorded inside a trace or if the trace is not sampled.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "traceId": {
                    "type": "string",
                    "description": "(Optional) Trace ID of the exemplar trace. trace_id may be missing if the measurement is not recorded inside a trace or if the trace is not sampled.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Exemplar",
            "description": "A representation of an exemplar, which is a sample input measurement. Exemplars also hold information about the environment when the measurement was recorded, for example the span and trace ID of the active span when the exemplar was recorded."
        },
        "opentelemetry.proto.metrics.v1.ExponentialHistogram": {
            "properties": {
                "dataPoints": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint"
                    },
                    "type": "array"
                },
                "aggregationTemporality": {
                    "enum": [
                        "AGGREGATION_TEMPORALITY_UNSPECIFIED",
                        0,
                        "AGGREGATION_TEMPORALITY_DELTA",
                        1,
                        "AGGREGATION_TEMPORALITY_CUMULATIVE",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Aggregation Temporality",
                    "description": "AggregationTemporality defines how a metric aggregator reports aggregated values. It describes how those values relate to the time interval over which they are aggregated."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Exponential Histogram",
            "description": "ExponentialHistogram represents the type of a metric that is calculated by aggregating as a ExponentialHistogram of all reported double measurements over a time interval."
        },
        "opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint": {
            "properties": {
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "The set of key/value pairs that uniquely identify the timeseries from where this point belongs. The list may be empty (may contain 0 elements). Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
                },
                "startTimeUnixNano": {
                    "type": "string",
                    "description": "StartTimeUnixNano is optional but strongly encouraged, see the the detailed comments above Metric. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
                },
                "timeUnixNano": {
                    "type": "string",
                    "description": "TimeUnixNano is required, see the detailed comments above Metric. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
                },
                "count": {
                    "type": "string",
                    "description": "count is the number of values in the population. Must be non-negative. This value must be equal to the sum of the \"bucket_counts\" values in the positive and negative Buckets plus the \"zero_count\" field."
                },
                "sum": {
                    "type": "number",
                    "description": "sum of the values in the population. If count is zero then this field must be zero. Note: Sum should only be filled out when measuring non-negative discrete events, and is assumed to be monotonic over the values of these events. Negative events *can* be recorded, but sum should not be filled out when doing so.  This is specifically to enforce compatibility w/ OpenMetrics, see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram"
                },
                "scale": {
                    "type": "integer",
                    "description": "scale describes the resolution of the histogram.  Boundaries are located at powers of the base, where:   base = (2^(2^-scale)) The histogram bucket identified by `index`, a signed integer, contains values that are greater than (base^index) and less than or equal to (base^(index+1)). The positive and negative ranges of the histogram are expressed separately.  Negative values are mapped by their absolute value into the negative range using the same scale as the positive range. scale is not restricted by the protocol, as the permissible values depend on the range of the data."
                },
                "zeroCount": {
                    "type": "string",
                    "description": "zero_count is the count of values that are either exactly zero or within the region considered zero by the instrumentation at the tolerated degree of precision.  This bucket stores values that cannot be expressed using the standard exponential formula as well as values that have been rounded to zero. Implementations MAY consider the zero bucket to have probability mass equal to (zero_count / count)."
                },
                "positive": {
                    "$ref": "#/definitions/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets",
                    "additionalProperties": true,
                    "description": "positive carries the positive range of exponential bucket counts."
                },
                "negative": {
                    "$ref": "#/definitions/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets",
                    "additionalProperties": true,
                    "description": "negative carries the negative range of exponential bucket counts."
                },
                "flags": {
                    "type": "integer",
                    "description": "Flags that apply to this specific data point.  See DataPointFlags for the available flags and their meaning."
                },
                "exemplars": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.Exemplar"
                    },
                    "type": "array",
                    "description": "(Optional) List of exemplars collected from measurements that were used to form the data point"
                },
                "min": {
                    "type": "number",
                    "description": "min is the minimum value over (start_time, end_time]."
                },
                "max": {
                    "type": "number",
                    "description": "max is the maximum value over (start_time, end_time]."
                },
                "zeroThreshold": {
                    "type": "number",
                    "description": "ZeroThreshold may be optionally set to convey the width of the zero region. Where the zero region is defined as the closed interval [-ZeroThreshold, ZeroThreshold]. When ZeroThreshold is 0, zero count bucket stores values that cannot be expressed using the standard exponential formula as well as values that have been rounded to zero."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Exponential Histogram Data Point",
            "description": "ExponentialHistogramDataPoint is a single data point in a timeseries that describes the time-varying values of a ExponentialHistogram of double values. A ExponentialHistogram contains summary statistics for a population of values, it may optionally contain the distribution of those values across a set of buckets."
        },
        "opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets": {
            "properties": {
                "offset": {
                    "type": "integer",
                    "description": "Offset is the bucket index of the first entry in the bucket_counts array.  Note: This uses a varint encoding as a simple form of compression."
                },
                "bucketCounts": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "bucket_counts is an array of count values, where bucket_counts[i] carries the count of the bucket at index (offset+i). bucket_counts[i] is the count of values greater than base^(offset+i) and less than or equal to base^(offset+i+1). Note: By contrast, the explicit HistogramDataPoint uses fixed64.  This field is expected to have many buckets, especially zeros, so uint64 has been selected to ensure varint encoding."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Buckets",
            "description": "Buckets are a set of bucket counts, encoded in a contiguous array of counts."
        },
        "opentelemetry.proto.metrics.v1.Gauge": {
            "properties": {
                "dataPoints": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.NumberDataPoint"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Gauge",
            "description": "Gauge represents the type of a scalar metric that always exports the \"current value\" for every data point. It should be used for an \"unknown\" aggregation. A Gauge does not support different aggregation temporalities. Given the aggregation is unknown, points cannot be combined using the same aggregation, regardless of aggregation temporalities. Therefore, AggregationTemporality is not included. Consequently, this also means \"StartTimeUnixNano\" is ignored for all data points."
        },
        "opentelemetry.proto.metrics.v1.Histogram": {
            "properties": {
                "dataPoints": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.HistogramDataPoint"
                    },
                    "type": "array"
                },
                "aggregationTemporality": {
                    "enum": [
                        "AGGREGATION_TEMPORALITY_UNSPECIFIED",
                        0,
                        "AGGREGATION_TEMPORALITY_DELTA",
                        1,
                        "AGGREGATION_TEMPORALITY_CUMULATIVE",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Aggregation Temporality",
                    "description": "AggregationTemporality defines how a metric aggregator reports aggregated values. It describes how those values relate to the time interval over which they are aggregated."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Histogram",
            "description": "Histogram represents the type of a metric that is calculated by aggregating as a Histogram of all reported measurements over a time interval."
        },
        "opentelemetry.proto.metrics.v1.HistogramDataPoint": {
            "properties": {
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "The set of key/value pairs that uniquely identify the timeseries from where this point belongs. The list may be empty (may contain 0 elements). Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
                },
                "startTimeUnixNano": {
                    "type": "string",
                    "description": "StartTimeUnixNano is optional but strongly encouraged, see the the detailed comments above Metric. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
                },
                "timeUnixNano": {
                    "type": "string",
                    "description": "TimeUnixNano is required, see the detailed comments above Metric. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
                },
                "count": {
                    "type": "string",
                    "description": "count is the number of values in the population. Must be non-negative. This value must be equal to the sum of the \"count\" fields in buckets if a histogram is provided."
                },
                "sum": {
                    "type": "number",
                    "description": "sum of the values in the population. If count is zero then this field must be zero. Note: Sum should only be filled out when measuring non-negative discrete events, and is assumed to be monotonic over the values of these events. Negative events *can* be recorded, but sum should not be filled out when doing so.  This is specifically to enforce compatibility w/ OpenMetrics, see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram"
                },
                "bucketCounts": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "bucket_counts is an optional field contains the count values of histogram for each bucket. The sum of the bucket_counts must equal the value in the count field. The number of elements in bucket_counts array must be by one greater than the number of elements in explicit_bounds array."
                },
                "explicitBounds": {
                    "items": {
                        "type": "number"
                    },
                    "type": "array",
                    "description": "explicit_bounds specifies buckets with explicitly defined bounds for values. The boundaries for bucket at index i are: (-infinity, explicit_bounds[i]] for i == 0 (explicit_bounds[i-1], explicit_bounds[i]] for 0 \u003c i \u003c size(explicit_bounds) (explicit_bounds[i-1], +infinity) for i == size(explicit_bounds) The values in the explicit_bounds array must be strictly increasing. Histogram buckets are inclusive of their upper boundary, except the last bucket where the boundary is at infinity. This format is intentionally compatible with the OpenMetrics histogram definition."
                },
                "exemplars": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.Exemplar"
                    },
                    "type": "array",
                    "description": "(Optional) List of exemplars collected from measurements that were used to form the data point"
                },
                "flags": {
                    "type": "integer",
                    "description": "Flags that apply to this specific data point.  See DataPointFlags for the available flags and their meaning."
                },
                "min": {
                    "type": "number",
                    "description": "min is the minimum value over (start_time, end_time]."
                },
                "max": {
                    "type": "number",
                    "description": "max is the maximum value over (start_time, end_time]."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Histogram Data Point",
            "description": "HistogramDataPoint is a single data point in a timeseries that describes the time-varying values of a Histogram. A Histogram contains summary statistics for a population of values, it may optionally contain the distribution of those values across a set of buckets. If the histogram contains the distribution of values, then both \"explicit_bounds\" and \"bucket counts\" fields must be defined. If the histogram does not contain the distribution of values, then both \"explicit_bounds\" and \"bucket_counts\" must be omitted and only \"count\" and \"sum\" are known."
        },
        "opentelemetry.proto.metrics.v1.Metric": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the metric, including its DNS name prefix. It must be unique."
                },
                "description": {
                    "type": "string",
                    "description": "description of the metric, which can be used in documentation."
                },
                "unit": {
                    "type": "string",
                    "description": "unit in which the metric value is reported. Follows the format described by http://unitsofmeasure.org/ucum.html."
                },
                "gauge": {
                    "$ref": "#/definitions/opentelemetry.proto.metrics.v1.Gauge",
                    "additionalProperties": true
                },
                "sum": {
                    "$ref": "#/definitions/opentelemetry.proto.metrics.v1.Sum",
                    "additionalProperties": true
                },
                "histogram": {
                    "$ref": "#/definitions/opentelemetry.proto.metrics.v1.Histogram",
                    "additionalProperties": true
                },
                "exponentialHistogram": {
                    "$ref": "#/definitions/opentelemetry.proto.metrics.v1.ExponentialHistogram",
                    "additionalProperties": true
                },
                "summary": {
                    "$ref": "#/definitions/opentelemetry.proto.metrics.v1.Summary",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Metric",
            "description": "Defines a Metric which has one or more timeseries.  The following is a brief summary of the Metric data model.  For more details, see:   https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/data-model.md The data model and relation between entities is shown in the diagram below. Here, \"DataPoint\" is the term used to refer to any one of the specific data point value types, and \"points\" is the term used to refer to any one of the lists of points contained in the Metric. - Metric is composed of a metadata and data. - Metadata part contains a name, description, unit. - Data is one of the possible types (Sum, Gauge, Histogram, Summary). - DataPoint contains timestamps, attributes, and one of the possible value type   fields.     Metric  +------------+  |name        |  |description |  |unit        |     +------------------------------------+  |data        |---\u003e |Gauge, Sum, Histogram, Summary, ... |  +------------+     +------------------------------------+    Data [One of Gauge, Sum, Histogram, Summary, ...]  +-----------+  |...        |  // Metadata about the Data.  |points     |--+  +-----------+  |                 |      +---------------------------+                 |      |DataPoint 1                |                 v      |+------+------+   +------+ |              +-----+   ||label |label |...|label | |              |  1  |--\u003e||value1|value2|...|valueN| |              +-----+   |+------+------+   +------+ |              |  .  |   |+-----+                    |              |  .  |   ||value|                    |              |  .  |   |+-----+                    |              |  .  |   +---------------------------+              |  .  |                   .              |  .  |                   .              |  .  |                   .              |  .  |   +---------------------------+              |  .  |   |DataPoint M                |              +-----+   |+------+------+   +------+ |              |  M  |--\u003e||label |label |...|label | |              +-----+   ||value1|value2|...|valueN| |                        |+------+------+   +------+ |                        |+-----+                    |                        ||value|                    |                        |+-----+                    |                        +---------------------------+ Each distinct type of DataPoint represents the output of a specific aggregation function, the result of applying the DataPoint's associated function of to one or more measurements. All DataPoint types have three common fields: - Attributes includes key-value pairs associated with the data point - TimeUnixNano is required, set to the end time of the aggregation - StartTimeUnixNano is optional, but strongly encouraged for DataPoints   having an AggregationTemporality field, as discussed below. Both TimeUnixNano and StartTimeUnixNano values are expressed as UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. # TimeUnixNano This field is required, having consistent interpretation across DataPoint types.  TimeUnixNano is the moment corresponding to when the data point's aggregate value was captured. Data points with the 0 value for TimeUnixNano SHOULD be rejected by consumers. # StartTimeUnixNano StartTimeUnixNano in general allows detecting when a sequence of observations is unbroken.  This field indicates to consumers the start time for points with cumulative and delta AggregationTemporality, and it should be included whenever possible to support correct rate calculation.  Although it may be omitted when the start time is truly unknown, setting StartTimeUnixNano is strongly encouraged."
        },
        "opentelemetry.proto.metrics.v1.NumberDataPoint": {
            "properties": {
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "The set of key/value pairs that uniquely identify the timeseries from where this point belongs. The list may be empty (may contain 0 elements). Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
                },
                "startTimeUnixNano": {
                    "type": "string",
                    "description": "StartTimeUnixNano is optional but strongly encouraged, see the the detailed comments above Metric. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
                },
                "timeUnixNano": {
                    "type": "string",
                    "description": "TimeUnixNano is required, see the detailed comments above Metric. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
                },
                "asDouble": {
                    "type": "number"
                },
                "asInt": {
                    "type": "string"
                },
                "exemplars": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.Exemplar"
                    },
                    "type": "array",
                    "description": "(Optional) List of exemplars collected from measurements that were used to form the data point"
                },
                "flags": {
                    "type": "integer",
                    "description": "Flags that apply to this specific data point.  See DataPointFlags for the available flags and their meaning."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Number Data Point",
            "description": "NumberDataPoint is a single data point in a timeseries that describes the time-varying scalar value of a metric."
        },
        "opentelemetry.proto.metrics.v1.ResourceMetrics": {
            "properties": {
                "resource": {
                    "$ref": "#/definitions/opentelemetry.proto.resource.v1.Resource",
                    "additionalProperties": true,
                    "description": "The resource for the metrics in this message. If this field is not set then no resource info is known."
                },
                "scopeMetrics": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.ScopeMetrics"
                    },
                    "type": "array",
                    "description": "A list of metrics that originate from a resource."
                },
                "schemaUrl": {
                    "type": "string",
                    "description": "This schema_url applies to the data in the \"resource\" field. It does not apply to the data in the \"scope_metrics\" field which have their own schema_url field."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Resource Metrics",
            "description": "A collection of ScopeMetrics from a Resource."
        },
        "opentelemetry.proto.metrics.v1.ScopeMetrics": {
            "properties": {
                "scope": {
                    "$ref": "#/definitions/opentelemetry.proto.common.v1.InstrumentationScope",
                    "additionalProperties": true,
                    "description": "The instrumentation scope information for the metrics in this message. Semantically when InstrumentationScope isn't set, it is equivalent with an empty instrumentation scope name (unknown)."
                },
                "metrics": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.Metric"
                    },
                    "type": "array",
                    "description": "A list of metrics that originate from an instrumentation library."
                },
                "schemaUrl": {
                    "type": "string",
                    "description": "This schema_url applies to all metrics in the \"metrics\" field."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Scope Metrics",
            "description": "A collection of Metrics produced by an Scope."
        },
        "opentelemetry.proto.metrics.v1.Sum": {
            "properties": {
                "dataPoints": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.NumberDataPoint"
                    },
                    "type": "array"
                },
                "aggregationTemporality": {
                    "enum": [
                        "AGGREGATION_TEMPORALITY_UNSPECIFIED",
                        0,
                        "AGGREGATION_TEMPORALITY_DELTA",
                        1,
                        "AGGREGATION_TEMPORALITY_CUMULATIVE",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Aggregation Temporality",
                    "description": "AggregationTemporality defines how a metric aggregator reports aggregated values. It describes how those values relate to the time interval over which they are aggregated."
                },
                "isMonotonic": {
                    "type": "boolean",
                    "description": "If \"true\" means that the sum is monotonic."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Sum",
            "description": "Sum represents the type of a scalar metric that is calculated as a sum of all reported measurements over a time interval."
        },
        "opentelemetry.proto.metrics.v1.Summary": {
            "properties": {
                "dataPoints": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.SummaryDataPoint"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Summary",
            "description": "Summary metric data are used to convey quantile summaries, a Prometheus (see: https://prometheus.io/docs/concepts/metric_types/#summary) and OpenMetrics (see: https://github.com/OpenObservability/OpenMetrics/blob/4dbf6075567ab43296eed941037c12951faafb92/protos/prometheus.proto#L45) data type. These data points cannot always be merged in a meaningful way. While they can be useful in some applications, histogram data points are recommended for new applications."
        },
        "opentelemetry.proto.metrics.v1.SummaryDataPoint": {
            "properties": {
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "The set of key/value pairs that uniquely identify the timeseries from where this point belongs. The list may be empty (may contain 0 elements). Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
                },
                "startTimeUnixNano": {
                    "type": "string",
                    "description": "StartTimeUnixNano is optional but strongly encouraged, see the the detailed comments above Metric. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
                },
                "timeUnixNano": {
                    "type": "string",
                    "description": "TimeUnixNano is required, see the detailed comments above Metric. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970."
                },
                "count": {
                    "type": "string",
                    "description": "count is the number of values in the population. Must be non-negative."
                },
                "sum": {
                    "type": "number",
                    "description": "sum of the values in the population. If count is zero then this field must be zero. Note: Sum should only be filled out when measuring non-negative discrete events, and is assumed to be monotonic over the values of these events. Negative events *can* be recorded, but sum should not be filled out when doing so.  This is specifically to enforce compatibility w/ OpenMetrics, see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#summary"
                },
                "quantileValues": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile"
                    },
                    "type": "array",
                    "description": "(Optional) list of values at different quantiles of the distribution calculated from the current snapshot. The quantiles must be strictly increasing."
                },
                "flags": {
                    "type": "integer",
                    "description": "Flags that apply to this specific data point.  See DataPointFlags for the available flags and their meaning."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Summary Data Point",
            "description": "SummaryDataPoint is a single data point in a timeseries that describes the time-varying values of a Summary metric."
        },
        "opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile": {
            "properties": {
                "quantile": {
                    "type": "number",
                    "description": "The quantile of a distribution. Must be in the interval [0.0, 1.0]."
                },
                "value": {
                    "type": "number",
                    "description": "The value at the given quantile of a distribution. Quantile values must NOT be negative."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Value At Quantile",
            "description": "Represents the value at a given quantile of a distribution. To record Min and Max values following conventions are used: - The 1.0 quantile is equivalent to the maximum value observed. - The 0.0 quantile is equivalent to the minimum value observed. See the following issue for more context: https://github.com/open-telemetry/opentelemetry-proto/issues/125"
        },
        "opentelemetry.proto.resource.v1.Resource": {
            "properties": {
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "Set of attributes that describe the resource. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
                },
                "droppedAttributesCount": {
                    "type": "integer",
                    "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0, then no attributes were dropped."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Resource",
            "description": "Resource information."
        }
    }
}