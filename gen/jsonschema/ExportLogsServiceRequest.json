{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/ExportLogsServiceRequest",
    "definitions": {
        "ExportLogsServiceRequest": {
            "properties": {
                "resourceLogs": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.logs.v1.ResourceLogs"
                    },
                    "type": "array",
                    "description": "An array of ResourceLogs. For data coming from a single resource this array will typically contain one element. Intermediary nodes (such as OpenTelemetry Collector) that receive data from multiple origins typically batch the data before forwarding further and in that case this array will contain multiple elements."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Export Logs Service Request"
        },
        "opentelemetry.proto.common.v1.AnyValue": {
            "properties": {
                "stringValue": {
                    "type": "string"
                },
                "boolValue": {
                    "type": "boolean"
                },
                "intValue": {
                    "type": "string"
                },
                "doubleValue": {
                    "type": "number"
                },
                "arrayValue": {
                    "$ref": "#/definitions/opentelemetry.proto.common.v1.ArrayValue",
                    "additionalProperties": true
                },
                "kvlistValue": {
                    "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValueList",
                    "additionalProperties": true
                },
                "bytesValue": {
                    "type": "string",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Any Value",
            "description": "AnyValue is used to represent any type of attribute value. AnyValue may contain a primitive value such as a string or integer or it may contain an arbitrary nested object containing arrays, key-value lists and primitives."
        },
        "opentelemetry.proto.common.v1.ArrayValue": {
            "properties": {
                "values": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.AnyValue"
                    },
                    "type": "array",
                    "description": "Array of values. The array may be empty (contain 0 elements)."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Array Value",
            "description": "ArrayValue is a list of AnyValue messages. We need ArrayValue as a message since oneof in AnyValue does not allow repeated fields."
        },
        "opentelemetry.proto.common.v1.InstrumentationScope": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "An empty instrumentation scope name means the name is unknown."
                },
                "version": {
                    "type": "string"
                },
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "Additional attributes that describe the scope. [Optional]. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
                },
                "droppedAttributesCount": {
                    "type": "integer"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Instrumentation Scope",
            "description": "InstrumentationScope is a message representing the instrumentation scope information such as the fully qualified name and version."
        },
        "opentelemetry.proto.common.v1.KeyValue": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "$ref": "#/definitions/opentelemetry.proto.common.v1.AnyValue",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Key Value",
            "description": "KeyValue is a key-value pair that is used to store Span attributes, Link attributes, etc."
        },
        "opentelemetry.proto.common.v1.KeyValueList": {
            "properties": {
                "values": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "A collection of key/value pairs of key-value pairs. The list may be empty (may contain 0 elements). The keys MUST be unique (it is not allowed to have more than one value with the same key)."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Key Value List",
            "description": "KeyValueList is a list of KeyValue messages. We need KeyValueList as a message since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches are semantically equivalent."
        },
        "opentelemetry.proto.logs.v1.LogRecord": {
            "properties": {
                "timeUnixNano": {
                    "type": "string",
                    "description": "time_unix_nano is the time when the event occurred. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. Value of 0 indicates unknown or missing timestamp."
                },
                "observedTimeUnixNano": {
                    "type": "string",
                    "description": "Time when the event was observed by the collection system. For events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging SDK) this timestamp is typically set at the generation time and is equal to Timestamp. For events originating externally and collected by OpenTelemetry (e.g. using Collector) this is the time when OpenTelemetry's code observed the event measured by the clock of the OpenTelemetry code. This field MUST be set once the event is observed by OpenTelemetry. For converting OpenTelemetry log data to formats that support only one timestamp or when receiving OpenTelemetry log data by recipients that support only one timestamp internally the following logic is recommended:   - Use time_unix_nano if it is present, otherwise use observed_time_unix_nano. Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970. Value of 0 indicates unknown or missing timestamp."
                },
                "severityNumber": {
                    "enum": [
                        "SEVERITY_NUMBER_UNSPECIFIED",
                        0,
                        "SEVERITY_NUMBER_TRACE",
                        1,
                        "SEVERITY_NUMBER_TRACE2",
                        2,
                        "SEVERITY_NUMBER_TRACE3",
                        3,
                        "SEVERITY_NUMBER_TRACE4",
                        4,
                        "SEVERITY_NUMBER_DEBUG",
                        5,
                        "SEVERITY_NUMBER_DEBUG2",
                        6,
                        "SEVERITY_NUMBER_DEBUG3",
                        7,
                        "SEVERITY_NUMBER_DEBUG4",
                        8,
                        "SEVERITY_NUMBER_INFO",
                        9,
                        "SEVERITY_NUMBER_INFO2",
                        10,
                        "SEVERITY_NUMBER_INFO3",
                        11,
                        "SEVERITY_NUMBER_INFO4",
                        12,
                        "SEVERITY_NUMBER_WARN",
                        13,
                        "SEVERITY_NUMBER_WARN2",
                        14,
                        "SEVERITY_NUMBER_WARN3",
                        15,
                        "SEVERITY_NUMBER_WARN4",
                        16,
                        "SEVERITY_NUMBER_ERROR",
                        17,
                        "SEVERITY_NUMBER_ERROR2",
                        18,
                        "SEVERITY_NUMBER_ERROR3",
                        19,
                        "SEVERITY_NUMBER_ERROR4",
                        20,
                        "SEVERITY_NUMBER_FATAL",
                        21,
                        "SEVERITY_NUMBER_FATAL2",
                        22,
                        "SEVERITY_NUMBER_FATAL3",
                        23,
                        "SEVERITY_NUMBER_FATAL4",
                        24
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Severity Number",
                    "description": "Possible values for LogRecord.SeverityNumber."
                },
                "severityText": {
                    "type": "string",
                    "description": "The severity text (also known as log level). The original string representation as it is known at the source. [Optional]."
                },
                "body": {
                    "$ref": "#/definitions/opentelemetry.proto.common.v1.AnyValue",
                    "additionalProperties": true,
                    "description": "A value containing the body of the log record. Can be for example a human-readable string message (including multi-line) describing the event in a free form or it can be a structured data composed of arrays and maps of other values. [Optional]."
                },
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "Additional attributes that describe the specific event occurrence. [Optional]. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
                },
                "droppedAttributesCount": {
                    "type": "integer"
                },
                "flags": {
                    "type": "integer",
                    "description": "Flags, a bit field. 8 least significant bits are the trace flags as defined in W3C Trace Context specification. 24 most significant bits are reserved and must be set to 0. Readers must not assume that 24 most significant bits will be zero and must correctly mask the bits when reading 8-bit trace flag (use flags \u0026 LOG_RECORD_FLAGS_TRACE_FLAGS_MASK). [Optional]."
                },
                "traceId": {
                    "type": "string",
                    "description": "A unique identifier for a trace. All logs from the same trace share the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR of length other than 16 bytes is considered invalid (empty string in OTLP/JSON is zero-length and thus is also invalid). This field is optional. The receivers SHOULD assume that the log record is not associated with a trace if any of the following is true:   - the field is not present,   - the field contains an invalid value.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "spanId": {
                    "type": "string",
                    "description": "A unique identifier for a span within a trace, assigned when the span is created. The ID is an 8-byte array. An ID with all zeroes OR of length other than 8 bytes is considered invalid (empty string in OTLP/JSON is zero-length and thus is also invalid). This field is optional. If the sender specifies a valid span_id then it SHOULD also specify a valid trace_id. The receivers SHOULD assume that the log record is not associated with a span if any of the following is true:   - the field is not present,   - the field contains an invalid value.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Log Record",
            "description": "A log record according to OpenTelemetry Log Data Model: https://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md"
        },
        "opentelemetry.proto.logs.v1.ResourceLogs": {
            "properties": {
                "resource": {
                    "$ref": "#/definitions/opentelemetry.proto.resource.v1.Resource",
                    "additionalProperties": true,
                    "description": "The resource for the logs in this message. If this field is not set then resource info is unknown."
                },
                "scopeLogs": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.logs.v1.ScopeLogs"
                    },
                    "type": "array",
                    "description": "A list of ScopeLogs that originate from a resource."
                },
                "schemaUrl": {
                    "type": "string",
                    "description": "This schema_url applies to the data in the \"resource\" field. It does not apply to the data in the \"scope_logs\" field which have their own schema_url field."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Resource Logs",
            "description": "A collection of ScopeLogs from a Resource."
        },
        "opentelemetry.proto.logs.v1.ScopeLogs": {
            "properties": {
                "scope": {
                    "$ref": "#/definitions/opentelemetry.proto.common.v1.InstrumentationScope",
                    "additionalProperties": true,
                    "description": "The instrumentation scope information for the logs in this message. Semantically when InstrumentationScope isn't set, it is equivalent with an empty instrumentation scope name (unknown)."
                },
                "logRecords": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.logs.v1.LogRecord"
                    },
                    "type": "array",
                    "description": "A list of log records."
                },
                "schemaUrl": {
                    "type": "string",
                    "description": "This schema_url applies to all logs in the \"logs\" field."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Scope Logs",
            "description": "A collection of Logs produced by a Scope."
        },
        "opentelemetry.proto.resource.v1.Resource": {
            "properties": {
                "attributes": {
                    "items": {
                        "$ref": "#/definitions/opentelemetry.proto.common.v1.KeyValue"
                    },
                    "type": "array",
                    "description": "Set of attributes that describe the resource. Attribute keys MUST be unique (it is not allowed to have more than one attribute with the same key)."
                },
                "droppedAttributesCount": {
                    "type": "integer",
                    "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0, then no attributes were dropped."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Resource",
            "description": "Resource information."
        }
    }
}